public class ArrayStack {
    private int[] stack;   // array of integers
    private int top;       // index of top
    private int capacity;  // max size

    // Constructor (no arg)
    public ArrayStack() {
        this(5);  // default size = 5
    }

    // Constructor (with size)
    public ArrayStack(int size) {
        stack = new int[size];
        capacity = size;
        top = 0;
    }

    // size
    public int size() {
        return top;
    }

    // push method
    public void push(int element) {
        if (top == capacity) {
            expand(); // auto expand
        }
        stack[top] = element;
        top++;
    }

    // pop method
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty, cannot pop!");
            return -1;
        }
        top--;
        int value = stack[top];
        stack[top] = 0; // optional
        return value;
    }

    // peek method
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty, nothing to peek!");
            return -1;
        }
        return stack[top - 1];
    }

    // isEmpty method
    public boolean isEmpty() {
        return top == 0;
    }

    // expand method (double the size)
    private void expand() {
        int newCapacity = capacity * 2;
        int[] newStack = new int[newCapacity];
        for (int i = 0; i < capacity; i++) {
            newStack[i] = stack[i];
        }
        stack = newStack;
        capacity = newCapacity;
    }

    // display method
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty!");
        } else {
            System.out.println("Stack elements:");
            for (int i = 0; i < top; i++) {
                System.out.print(stack[i] + " ");
            }
            System.out.println();
        }
    }
}
